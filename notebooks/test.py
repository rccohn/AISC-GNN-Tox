# -*- coding: utf-8 -*-
"""Copy of RandomForest_tox21.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1pK6T8nea6Q5AsgyIumGNjhT8HriZkkxg
"""
# Import deepchem just to check the version
import deepchem
deepchem.__version__



import numpy as np
import deepchem as dc
import tempfile
from sklearn.svm import SVC
from sklearn.multiclass import OneVsRestClassifier
from sklearn.svm import LinearSVC
from sklearn.ensemble import RandomForestClassifier
# Only for debug!
np.random.seed(123)

# Load Tox21 dataset
n_features = 1024
#import pdb
#pdb.set_trace()
tox21_tasks, tox21_datasets, transformers = dc.molnet.load_tox21()
train_dataset, valid_dataset, test_dataset = tox21_datasets

#train_dataset.y = train_dataset.y.astype('int')
#valid_dataset.y = valid_dataset.y.astype('int')
#test_dataset.y = test_dataset.y.astype('int')

# Fit models
metric = dc.metrics.Metric(dc.metrics.roc_auc_score, np.mean)


def model_builder(model_dir):
  sklearn_model = SVC(C=1.0, class_weight="balanced", probability=True)
  return dc.models.SklearnModel(sklearn_model, model_dir)


model_dir = tempfile.mkdtemp()
model = dc.models.SingletaskToMultitask(tox21_tasks, model_builder, model_dir)

forest_model = clf = RandomForestClassifier(n_estimators=400, max_depth=100)
forest_model.fit(train_dataset.X, train_dataset.y.astype('int'))

class_pred_rf = forest_model.predict(valid_dataset.X)


ovrclf = OneVsRestClassifier(LinearSVC(random_state=0))
ovrclf.fit(train_dataset.X, train_dataset.y.astype('int'))

class_pred_ovr = ovrclf.predict(valid_dataset.X)


# Fit trained model
#model.fit(train_dataset)
#model.save()

#print("Evaluating model")
#train_scores = model.evaluate(train_dataset, [metric], transformers)
#valid_scores = model.evaluate(valid_dataset, [metric], transformers)

#print("Train scores")
#print(train_scores)

#print("Validation scores")
#print(valid_scores)


print(class_pred_rf.sum())

print(class_pred_ovr[:20])

print(valid_dataset.y[:20])

from sklearn.metrics import accuracy_score
print('final accuracies')
print(accuracy_score(valid_dataset.y, class_pred_ovr))

print(accuracy_score(valid_dataset.y, class_pred_rf))
